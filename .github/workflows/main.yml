name: build openwrt

on:
  watch:
    types: [started]

env:
  CONFIG_FILE: .config

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Checkout
      uses: actions/checkout@master
    - name: Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: |
        git clone https://github.com/coolsnowwolf/lede && cd lede
        git clone https://github.com/openwrt-dev/po2lmo.git
        git clone https://github.com/KyleRicardo/MentoHUST-OpenWrt-ipk.git package/mentohust
        git clone https://github.com/BoringCat/luci-app-mentohust.git package/luci-app-mentohust
    - name: Update feeds & Install feeds
      run: |
        cd lede && sed -i 's/\#src-git helloworld/\src-git helloworld/g' ./feeds.conf.default
        ./scripts/feeds update -a && ./scripts/feeds install -a
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files lede/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE lede/.config
    - name: Download package
      id: package
      run: |
        cd lede
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile firmware
      id: compile
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j5 V=s
        echo "::set-output name=status::success"
    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: firmware
        path: lede/bin/targets/
